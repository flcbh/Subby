// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Subby.Data
{
    [Table("User", Schema = "subbynetwork")]
    public partial class User
    {
        public User()
        {
            Advert = new HashSet<Advert>();
            Chat = new HashSet<Chat>();
            ChatMember = new HashSet<ChatMember>();
            Job = new HashSet<Job>();
            JobApplicationApplicant = new HashSet<JobApplication>();
            JobApplicationUser = new HashSet<JobApplication>();
            JobInterest = new HashSet<JobInterest>();
            Notification = new HashSet<Notification>();
            Subscription = new HashSet<Subscription>();
            UserReviewReviewer = new HashSet<UserReview>();
            UserReviewUser = new HashSet<UserReview>();
            UserToken = new HashSet<UserToken>();
            UserTrade = new HashSet<UserTrade>();
        }

        [Key]
        public int Id { get; set; }
        [StringLength(255)]
        public string Email { get; set; }
        [StringLength(255)]
        public string UserName { get; set; }
        [StringLength(255)]
        public string PhoneNumber { get; set; }
        public bool? TwoFactorEnabled { get; set; }
        [StringLength(255)]
        public string PasswordHash { get; set; }
        [StringLength(255)]
        public string NormalizedUserName { get; set; }
        [StringLength(255)]
        public string NormalizedEmail { get; set; }
        public bool? PhoneNumberConfirmed { get; set; }
        [StringLength(255)]
        public string FirstName { get; set; }
        [StringLength(255)]
        public string LastName { get; set; }
        public DateTime? CreatedAt { get; set; }
        public bool? EmailConfirmed { get; set; }
        public bool? MarketingOptIn { get; set; }
        [Column(TypeName = "text")]
        public string Bio { get; set; }
        public bool? IsTrader { get; set; }
        [StringLength(255)]
        public string TradeName { get; set; }
        [StringLength(255)]
        public string TradeAddressLine1 { get; set; }
        [StringLength(255)]
        public string TradeAddressLine2 { get; set; }
        [StringLength(255)]
        public string TradeCity { get; set; }
        [StringLength(255)]
        public string TradePostcode { get; set; }
        [Column(TypeName = "decimal(19, 5)")]
        public decimal? TradeDistance { get; set; }
        [StringLength(255)]
        public string Latitude { get; set; }
        [StringLength(255)]
        public string Longitude { get; set; }
        [StringLength(255)]
        public string Avatar { get; set; }
        public bool? ShowExternalJobs { get; set; }
        [StringLength(255)]
        public string Role { get; set; }
        public string PushToken { get; set; }
        public DateTime? LastActive { get; set; }

        [InverseProperty("User")]
        public virtual ICollection<Advert> Advert { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<Chat> Chat { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<ChatMember> ChatMember { get; set; }
        [InverseProperty("UserId1Navigation")]
        public virtual ICollection<Job> Job { get; set; }
        [InverseProperty(nameof(JobApplication.Applicant))]
        public virtual ICollection<JobApplication> JobApplicationApplicant { get; set; }
        [InverseProperty(nameof(JobApplication.User))]
        public virtual ICollection<JobApplication> JobApplicationUser { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<JobInterest> JobInterest { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<Notification> Notification { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<Subscription> Subscription { get; set; }
        [InverseProperty(nameof(UserReview.Reviewer))]
        public virtual ICollection<UserReview> UserReviewReviewer { get; set; }
        [InverseProperty(nameof(UserReview.User))]
        public virtual ICollection<UserReview> UserReviewUser { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<UserToken> UserToken { get; set; }
        [InverseProperty("User")]
        public virtual ICollection<UserTrade> UserTrade { get; set; }
    }
}